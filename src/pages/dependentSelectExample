import "./formik-demo.css";
import React from "react";
import { render } from "react-dom";
import { withFormik } from "formik";
import * as Yup from "yup";

import Select from "react-select";

const companies = [
  { value: "facebook", label: "Facebook" },
  { value: "github", label: "GitHub" }
];

const employees = {
  facebook: [
    { value: "Dan Abramov", label: "Dan Abramov" },
    { value: "Sophie Alpert", label: "Sophie Alpert" }
  ],
  github: [
    { value: "Max Stoiber", label: "Max Stoiber" },
    { value: "Brian Lovin", label: "Brian Lovin" }
  ]
};

const emptyOption = { value: "", label: "" };

const formikEnhancer = withFormik({
  validationSchema: Yup.object().shape({
    company: Yup.object().shape({
      label: Yup.string(),
      value: Yup.string().required("Company is required!")
    }),
    employee: Yup.object().shape({
      label: Yup.string(),
      value: Yup.string().required("Employee is required!")
    })
  }),
  mapPropsToValues: props => ({
    company: emptyOption,
    employee: emptyOption
  }),
  handleSubmit: (values, { setSubmitting }) => {
    const payload = {
      ...values,
      company: values.company.value,
      employee: values.employee.value
    };
    setTimeout(() => {
      alert(JSON.stringify(payload, null, 2));
      setSubmitting(false);
    }, 1000);
  },
  displayName: "MyForm"
});

class MyForm extends React.Component {
  state = {
    prevCompany: ""
  };

  render() {
    const {
      values,
      touched,
      dirty,
      errors,
      handleChange,
      handleBlur,
      handleSubmit,
      handleReset,
      setFieldValue,
      setFieldTouched,
      isSubmitting
    } = this.props;
    return (
      <form onSubmit={handleSubmit}>
        <div style={{ margin: "1rem 0" }}>
          <label htmlFor="company" style={{ display: "block" }}>
            Company
          </label>
          <MySelect
            name="company"
            options={companies}
            value={values.company}
            onChange={(field, value) => {
              const newCompanyValue = value.value;
              const shouldResetDependentSelect =
                newCompanyValue !== this.state.prevCompany;
              this.setState({ prevCompany: newCompanyValue }, () => {
                setFieldValue(field, value);
                if (shouldResetDependentSelect) {
                  setFieldValue("employee", emptyOption);
                }
              });
            }}
            onBlur={setFieldTouched}
            error={errors.company}
            touched={touched.company}
          />
        </div>
        <div style={{ margin: "1rem 0" }}>
          <label htmlFor="employee" style={{ display: "block" }}>
            Employee
          </label>
          <MySelect
            name="employee"
            isDisabled={!values.company.value}
            options={
              values.company.value ? employees[values.company.value] : []
            }
            value={values.employee}
            onChange={setFieldValue}
            onBlur={setFieldTouched}
            error={errors.employee}
            touched={touched.employee}
          />
        </div>

        <button
          type="button"
          className="outline"
          onClick={handleReset}
          disabled={!dirty || isSubmitting}
        >
          Reset
        </button>
        <button type="submit" disabled={isSubmitting}>
          Submit
        </button>

        <DisplayFormikState {...this.props} />
      </form>
    );
  }
}

class MySelect extends React.Component {
  static defaultProps = {
    isDisabled: false
  };

  handleChange = value => {
    // this is going to call setFieldValue and manually update values[this.props.name]
    this.props.onChange(this.props.name, value);
  };

  handleBlur = () => {
    // this is going to call setFieldTouched and manually update touched[this.props.name]
    this.props.onBlur(this.props.name, true);
  };

  render() {
    return (
      <React.Fragment>
        <Select
          id={this.props.name}
          name={this.props.name}
          options={this.props.options}
          onChange={this.handleChange}
          onBlur={this.handleBlur}
          value={this.props.value}
          isDisabled={this.props.isDisabled}
        />
        {!!this.props.error && this.props.touched && (
          <div style={{ color: "red", marginTop: ".5rem" }}>
            {Object.values(this.props.error)}
          </div>
        )}
      </React.Fragment>
    );
  }
}

const MyEnhancedForm = formikEnhancer(MyForm);

// Helper styles for demo
import "./formik-demo.css";
import { MoreResources, DisplayFormikState } from "./formik-helper";

const App = () => (
  <div className="app">
    <h1>
      Using <a href="https://github.com/jaredpalmer/formik">Formik</a> with
      3rd-party select components where one depends on another
    </h1>
    <p>
      This example shows to use Formik with multiple 3rd-party select components
      where one select's options depend on the value of another select. The
      trick is to use Formik's <code>setFieldValue</code> prop and a custom
      component class whenever you need a custom change handler. You will need
      to make sure to update the dependent select properly when the value of the
      field it's watching changes.
    </p>
    <p>
      To show this off, below is a Formik-enhanced form. It has a custom select
      component for <code>company</code>
      and a custom select component for <code>employee</code> where the options
      for <code>employee</code> depend on the <code>company</code> value
      selected. Both selects use Jed Watson's{" "}
      <a href="https://github.com/JedWatson/react-select">react-select</a>{" "}
      library.
    </p>
    <MyEnhancedForm />
    <MoreResources />
  </div>
);

render(<App />, document.getElementById("root"));
